// scripts/fix-memory-issues.js - Fix memory management issues

require('dotenv').config();
const fs = require('fs');
const path = require('path');
const winston = require('winston');
const os = require('os');

// Configure logging
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.printf(({ level, message, timestamp }) => {
      return `${timestamp} ${level}: ${message}`;
    })
  ),
  transports: [
    new winston.transports.Console({
      format: winston.format.combine(
        winston.format.colorize(),
        winston.format.simple()
      )
    }),
    new winston.transports.File({ filename: 'logs/fix-memory-issues.log' })
  ]
});

// Ensure logs directory exists
try {
  if (!fs.existsSync('logs')) {
    fs.mkdirSync('logs');
  }
} catch (error) {
  console.error('Error creating logs directory:', error);
}

// Main function
async function main() {
  logger.info('Starting memory management fix...');

  // 1. Update .env file with memory management settings
  try {
    const envPath = path.join(process.cwd(), '.env');
    if (fs.existsSync(envPath)) {
      let envContent = fs.readFileSync(envPath, 'utf8');
      
      // Add or update memory management settings
      const memorySettings = `
# Memory Management
MEMORY_USAGE_THRESHOLD=0.85
CACHE_MAX_ITEMS=250
CACHE_CHECK_PERIOD=300
ENABLE_AGGRESSIVE_GC=true
ENABLE_PERFORMANCE_LOGGING=false`;
      
      // Check if memory management settings already exist
      if (envContent.includes('# Memory Management')) {
        // Find the memory management section
        const memorySettingsStart = envContent.indexOf('# Memory Management');
        const memorySettingsEnd = envContent.indexOf('#', memorySettingsStart + 1);
        
        if (memorySettingsEnd !== -1) {
          // Replace the entire memory management section
          envContent = envContent.slice(0, memorySettingsStart) + memorySettings + '\n\n' + envContent.slice(memorySettingsEnd);
        } else {
          // Replace until the end of the file
          envContent = envContent.slice(0, memorySettingsStart) + memorySettings;
        }
      } else {
        // Add new memory management settings
        envContent += '\n' + memorySettings + '\n';
      }
      
      fs.writeFileSync(envPath, envContent);
      logger.info('Updated memory management settings in .env file');
    } else {
      logger.warn('.env file not found');
    }
  } catch (error) {
    logger.error(`Error updating .env file: ${error.message}`);
  }

  // 2. Create optimize-memory.js script
  try {
    const optimizeMemoryPath = path.join(process.cwd(), 'scripts', 'optimize-memory.js');
    
    // Create scripts directory if it doesn't exist
    if (!fs.existsSync(path.join(process.cwd(), 'scripts'))) {
      fs.mkdirSync(path.join(process.cwd(), 'scripts'), { recursive: true });
    }
    
    const optimizeMemoryContent = `// scripts/optimize-memory.js - Optimize memory usage

const os = require('os');
const logger = require('winston');

function optimizeMemory() {
  logger.info('Starting memory optimization');

  // Clear module cache for non-essential modules
  clearModuleCache();

  // Clear global caches
  clearGlobalCaches();

  // Force garbage collection if available
  if (global.gc) {
    logger.info('Running garbage collection');
    global.gc();
  } else {
    logger.info('Garbage collection not available. Run with --expose-gc flag for better optimization.');
  }

  // Check memory usage after optimization
  const memoryUsage = process.memoryUsage();
  const heapUsed = memoryUsage.heapUsed;
  const heapTotal = memoryUsage.heapTotal;
  const memoryRatio = heapUsed / heapTotal;

  // Format memory values for logging (in MB)
  const heapUsedMB = Math.round(heapUsed / (1024 * 1024));
  const heapTotalMB = Math.round(heapTotal / (1024 * 1024));

  logger.info(\`Memory usage after optimization: \${heapUsedMB}MB used / \${heapTotalMB}MB total (\${(memoryRatio * 100).toFixed(2)}%)\`);
}

function clearModuleCache() {
  const essentialModules = [
    'fs', 'path', 'os', 'http', 'https', 'net', 'events',
    'stream', 'util', 'winston', 'dotenv'
  ];

  let cleared = 0;

  // Clear module cache for non-essential modules
  Object.keys(require.cache).forEach(moduleId => {
    const isEssential = essentialModules.some(name => 
      moduleId.includes(\`/node_modules/\${name}/\`) || 
      moduleId.includes(\`\\\\\${name}\\\\\`) ||
      moduleId.includes(\`/\${name}/\`)
    );

    if (!isEssential && !moduleId.includes('node_modules')) {
      delete require.cache[moduleId];
      cleared++;
    }
  });

  logger.info(\`Cleared \${cleared} module caches\`);
}

function clearGlobalCaches() {
  let cleared = 0;

  // Clear global caches
  if (global.cache) {
    global.cache.clear();
    cleared++;
  }

  logger.info(\`Cleared \${cleared} global caches\`);
}

module.exports = {
  optimizeMemory
};

if (require.main === module) {
  optimizeMemory();
}`;

    fs.writeFileSync(optimizeMemoryPath, optimizeMemoryContent);
    logger.info('Created optimize-memory.js script');
  } catch (error) {
    logger.error(`Error creating optimize-memory.js script: ${error.message}`);
  }
}

main().catch(error => {
  logger.error(`Memory management fix failed: ${error.message}`);
  logger.error(error.stack);
});